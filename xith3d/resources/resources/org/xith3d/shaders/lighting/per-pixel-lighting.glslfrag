/**
 * This shader implements a spot per-pixel-lighting using the 
 * diffuse, specular, and ambient terms acoording to
 * "Mathematics of Lighthing" as found in the book
 * "OpenGL Programming Guide" (aka The Red Book).
 * 
 * -- Antonio Ramires Fernandes
 */

uniform sampler2D texture0;
varying vec4 diffuse;
varying vec4 ambientGlobal;
varying vec4 ambient;
varying vec3 normal;
varying vec3 lightDir;
varying vec3 halfVector;
varying float dist;

float angle( vec3 v1, vec3 v2 )
{
    float xx = v1.x * v2.z - v1.z * v2.y;
    float yy = v1.z * v2.x - v1.x * v2.z;
    float zz = v1.x * v2.y - v1.y * v2.x;
    float cross = sqrt( xx * xx + yy * yy + zz * zz );
    
    return( abs( atan2( cross, dot( v1, v2 ) ) ) );
}

float fadeToBorder( vec3 lightDir )
{
    float a = angle( gl_LightSource[ 0 ].spotDirection, lightDir );
    float q;
    if ( gl_LightSource[ 0 ].spotCutoff > 0.0 )
        q = 1.0 - ( a / gl_LightSource[ 0 ].spotCutoff );
    else
        q = 1.0;
    
    return( q * q );
}

void main()
{
    vec3 halfV;
    float NdotHV;
    float NdotL;
    vec4 color = ambientGlobal;
    float att;
    float spotEffect;
    
    /*
     * A fragment shader can't write a varying variable, hence we need
     * a new variable to store the normalized interpolated normal.
     */
    vec3 norm = normalize( normal );
    
    /*
     * compute the dot product between normal and ldir.
     */
    NdotL = max( dot( norm, normalize( lightDir ) ), 0.0 );
    
    if ( NdotL > 0.0 )
    {
        spotEffect = dot( normalize( gl_LightSource[ 0 ].spotDirection ), normalize( -lightDir ) );
        if ( spotEffect > gl_LightSource[ 0 ].spotCosCutoff )
        {
            spotEffect = pow( spotEffect, gl_LightSource[ 0 ].spotExponent );
            att = spotEffect / ( gl_LightSource[ 0 ].constantAttenuation +
                                 gl_LightSource[ 0 ].linearAttenuation * dist +
                                 gl_LightSource[ 0 ].quadraticAttenuation * dist * dist);
            
            color += att * ( diffuse * NdotL + ambient );
            
            halfV = normalize( halfVector );
            NdotHV = max( dot( norm, halfV ), 0.0 );
            color += att * gl_FrontMaterial.specular * gl_LightSource[ 0 ].specular * pow( NdotHV, gl_FrontMaterial.shininess );
           
            // add a special squaric attenuation from center to border to smoothly fade out the spot's borders.
            color *= fadeToBorder( lightDir );
        }
    }
    
    gl_FragColor = texture2D( texture0, gl_TexCoord[ 0 ].st ) * color;
}
